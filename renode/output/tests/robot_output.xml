<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Rebot 6.0.2 (Python 3.10.12 on linux)" generated="20240418 16:24:18.206" rpa="false" schemaversion="3">
<suite id="s1" name="Test Suite" source="/workspaces/gcc-renode-verilator/yadro.robot">
<kw name="Setup" library="renode-keywords" type="SETUP">
<msg timestamp="20240418 16:23:28.643" level="TRACE">Arguments: [  ]</msg>
<kw name="Evaluate" library="BuiltIn">
<var>${SYSTEM}</var>
<arg>platform.system()</arg>
<arg>modules=platform</arg>
<doc>Evaluates the given expression in Python and returns the result.</doc>
<msg timestamp="20240418 16:23:28.644" level="TRACE">Arguments: [ 'platform.system()' | modules='platform' ]</msg>
<msg timestamp="20240418 16:23:28.644" level="TRACE">Return: 'Linux'</msg>
<msg timestamp="20240418 16:23:28.644" level="INFO">${SYSTEM} = Linux</msg>
<status status="PASS" starttime="20240418 16:23:28.643" endtime="20240418 16:23:28.644"/>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<var>${CONFIGURATION}</var>
<arg>not ${SKIP_RUNNING_SERVER} and ${SERVER_REMOTE_DEBUG}</arg>
<arg>Debug</arg>
<arg>${CONFIGURATION}</arg>
<doc>Sets variable based on the given condition.</doc>
<msg timestamp="20240418 16:23:28.645" level="TRACE">Arguments: [ 'not True and False' | 'Debug' | '${CONFIGURATION}' ]</msg>
<msg timestamp="20240418 16:23:28.645" level="TRACE">Return: 'Release'</msg>
<msg timestamp="20240418 16:23:28.645" level="INFO">${CONFIGURATION} = Release</msg>
<status status="PASS" starttime="20240418 16:23:28.644" endtime="20240418 16:23:28.645"/>
</kw>
<kw name="Create List" library="BuiltIn">
<var>@{PARAMS}</var>
<arg>--robot-server-port</arg>
<arg>${PORT_NUMBER}</arg>
<arg>--hide-log</arg>
<doc>Returns a list containing given items.</doc>
<msg timestamp="20240418 16:23:28.645" level="TRACE">Arguments: [ '--robot-server-port' | '49152' | '--hide-log' ]</msg>
<msg timestamp="20240418 16:23:28.645" level="TRACE">Return: ['--robot-server-port', '49152', '--hide-log']</msg>
<msg timestamp="20240418 16:23:28.645" level="INFO">@{PARAMS} = [ --robot-server-port | 49152 | --hide-log ]</msg>
<status status="PASS" starttime="20240418 16:23:28.645" endtime="20240418 16:23:28.645"/>
</kw>
<if>
<branch type="IF" condition="${DISABLE_XWT}">
<kw name="Insert Into List" library="Collections">
<arg>${PARAMS}</arg>
<arg>0</arg>
<arg>--disable-xwt</arg>
<doc>Inserts ``value`` into ``list`` to the position specified with ``index``.</doc>
<status status="NOT RUN" starttime="20240418 16:23:28.646" endtime="20240418 16:23:28.646"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:23:28.646" endtime="20240418 16:23:28.646"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.646" endtime="20240418 16:23:28.646"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER}">
<kw name="File Should Exist" library="OperatingSystem">
<arg>${DIRECTORY}/${BINARY_NAME}</arg>
<arg>msg=Robot Framework remote server binary not found (${DIRECTORY}/${BINARY_NAME}). Did you forget to build it in ${CONFIGURATION} configuration?</arg>
<doc>Fails unless the given ``path`` points to an existing file.</doc>
<status status="NOT RUN" starttime="20240418 16:23:28.646" endtime="20240418 16:23:28.646"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:23:28.646" endtime="20240418 16:23:28.646"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.646" endtime="20240418 16:23:28.647"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and not ${SERVER_REMOTE_DEBUG} and not '${SYSTEM}' == 'Windows' and not ${NET_PLATFORM}">
<kw name="Start Process" library="Process">
<arg>mono</arg>
<arg>${BINARY_NAME}</arg>
<arg>@{PARAMS}</arg>
<arg>cwd=${DIRECTORY}</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20240418 16:23:28.647" endtime="20240418 16:23:28.647"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:23:28.647" endtime="20240418 16:23:28.647"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.647" endtime="20240418 16:23:28.647"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and not ${SERVER_REMOTE_DEBUG} and '${SYSTEM}' == 'Windows'">
<kw name="Start Process" library="Process">
<arg>${BINARY_NAME}</arg>
<arg>@{PARAMS}</arg>
<arg>cwd=${DIRECTORY}</arg>
<arg>shell=true</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20240418 16:23:28.648" endtime="20240418 16:23:28.648"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:23:28.647" endtime="20240418 16:23:28.648"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.647" endtime="20240418 16:23:28.648"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and not ${SERVER_REMOTE_DEBUG} and ${NET_PLATFORM}">
<kw name="Start Process" library="Process">
<arg>dotnet ${BINARY_NAME}</arg>
<arg>@{PARAMS}</arg>
<arg>cwd=${DIRECTORY}</arg>
<arg>shell=true</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20240418 16:23:28.648" endtime="20240418 16:23:28.648"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:23:28.648" endtime="20240418 16:23:28.648"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.648" endtime="20240418 16:23:28.648"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and ${SERVER_REMOTE_DEBUG} and not '${SYSTEM}' == 'Windows' and not ${NET_PLATFORM}">
<kw name="Start Process" library="Process">
<arg>mono</arg>
<arg>--debug</arg>
<arg>--debugger-agent\=transport\=dt_socket,address\=0.0.0.0:${SERVER_REMOTE_PORT},server\=y,suspend\=${SERVER_REMOTE_SUSPEND}</arg>
<arg>${BINARY_NAME}</arg>
<arg>@{PARAMS}</arg>
<arg>cwd=${DIRECTORY}</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20240418 16:23:28.649" endtime="20240418 16:23:28.649"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:23:28.648" endtime="20240418 16:23:28.649"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.648" endtime="20240418 16:23:28.649"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER} and ${SERVER_REMOTE_DEBUG} and '${SYSTEM}' == 'Windows'">
<kw name="Fatal Error" library="BuiltIn">
<arg>Windows doesn't support server remote debug option.</arg>
<doc>Stops the whole test execution.</doc>
<status status="NOT RUN" starttime="20240418 16:23:28.649" endtime="20240418 16:23:28.649"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:23:28.649" endtime="20240418 16:23:28.649"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.649" endtime="20240418 16:23:28.650"/>
</if>
<if>
<branch type="IF" condition="not '${SYSTEM}' == 'Windows'">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>60s</arg>
<arg>1s</arg>
<arg>Import Library</arg>
<arg>Remote</arg>
<arg>http://127.0.0.1:${PORT_NUMBER}/</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<msg timestamp="20240418 16:23:28.650" level="TRACE">Arguments: [ '60s' | '1s' | 'Import Library' | 'Remote' | 'http://127.0.0.1:${PORT_NUMBER}/' ]</msg>
<kw name="Import Library" library="BuiltIn">
<arg>Remote</arg>
<arg>http://127.0.0.1:${PORT_NUMBER}/</arg>
<doc>Imports a library with the given name and optional arguments.</doc>
<msg timestamp="20240418 16:23:28.650" level="TRACE">Arguments: [ 'Remote' | 'http://127.0.0.1:${PORT_NUMBER}/' ]</msg>
<msg timestamp="20240418 16:23:28.979" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:23:28.650" endtime="20240418 16:23:28.980"/>
</kw>
<msg timestamp="20240418 16:23:28.980" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:23:28.650" endtime="20240418 16:23:28.980"/>
</kw>
<status status="PASS" starttime="20240418 16:23:28.650" endtime="20240418 16:23:28.980"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.650" endtime="20240418 16:23:28.980"/>
</if>
<if>
<branch type="IF" condition="'${SYSTEM}' == 'Windows'">
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<arg>60s</arg>
<arg>1s</arg>
<arg>Import Library</arg>
<arg>Remote</arg>
<arg>http://localhost:${PORT_NUMBER}/</arg>
<doc>Runs the specified keyword and retries if it fails.</doc>
<status status="NOT RUN" starttime="20240418 16:23:28.980" endtime="20240418 16:23:28.981"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:23:28.980" endtime="20240418 16:23:28.981"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.980" endtime="20240418 16:23:28.982"/>
</if>
<kw name="Set Default Uart Timeout" library="Remote">
<arg>${DEFAULT_UART_TIMEOUT}</arg>
<msg timestamp="20240418 16:23:28.982" level="TRACE">Arguments: [ '8' ]</msg>
<msg timestamp="20240418 16:23:28.999" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:23:28.982" endtime="20240418 16:23:28.999"/>
</kw>
<if>
<branch type="IF" condition="${SAVE_LOGS}">
<kw name="Enable Logging To Cache" library="Remote">
<msg timestamp="20240418 16:23:29.000" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20240418 16:23:29.004" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:23:29.000" endtime="20240418 16:23:29.004"/>
</kw>
<status status="PASS" starttime="20240418 16:23:28.999" endtime="20240418 16:23:29.004"/>
</branch>
<status status="PASS" starttime="20240418 16:23:28.999" endtime="20240418 16:23:29.004"/>
</if>
<kw name="Set Variable" library="BuiltIn">
<var>${allowed_chars}</var>
<arg>abcdefghijklmnopqrstuvwxyz01234567890_-</arg>
<doc>Returns the given values which can then be assigned to a variables.</doc>
<msg timestamp="20240418 16:23:29.005" level="TRACE">Arguments: [ 'abcdefghijklmnopqrstuvwxyz01234567890_-' ]</msg>
<msg timestamp="20240418 16:23:29.005" level="TRACE">Return: 'abcdefghijklmnopqrstuvwxyz01234567890_-'</msg>
<msg timestamp="20240418 16:23:29.005" level="INFO">${allowed_chars} = abcdefghijklmnopqrstuvwxyz01234567890_-</msg>
<status status="PASS" starttime="20240418 16:23:29.005" endtime="20240418 16:23:29.005"/>
</kw>
<kw name="Convert To Lower Case" library="String">
<var>${metrics_fname}</var>
<arg>${SUITE_NAME}</arg>
<doc>Converts string to lower case.</doc>
<msg timestamp="20240418 16:23:29.005" level="TRACE">Arguments: [ 'yadro' ]</msg>
<msg timestamp="20240418 16:23:29.005" level="TRACE">Return: 'yadro'</msg>
<msg timestamp="20240418 16:23:29.005" level="INFO">${metrics_fname} = yadro</msg>
<status status="PASS" starttime="20240418 16:23:29.005" endtime="20240418 16:23:29.005"/>
</kw>
<kw name="Replace String" library="String">
<var>${metrics_fname}</var>
<arg>${metrics_fname}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20240418 16:23:29.006" level="TRACE">Arguments: [ 'yadro' | ' ' | '_' ]</msg>
<msg timestamp="20240418 16:23:29.006" level="TRACE">Return: 'yadro'</msg>
<msg timestamp="20240418 16:23:29.006" level="INFO">${metrics_fname} = yadro</msg>
<status status="PASS" starttime="20240418 16:23:29.006" endtime="20240418 16:23:29.006"/>
</kw>
<kw name="Replace String Using Regexp" library="String">
<var>${metrics_fname}</var>
<arg>${metrics_fname}</arg>
<arg>[^${allowed_chars}]+</arg>
<arg>${EMPTY}</arg>
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<msg timestamp="20240418 16:23:29.007" level="TRACE">Arguments: [ 'yadro' | '[^abcdefghijklmnopqrstuvwxyz01234567890_-]+' | '' ]</msg>
<msg timestamp="20240418 16:23:29.007" level="TRACE">Return: 'yadro'</msg>
<msg timestamp="20240418 16:23:29.007" level="INFO">${metrics_fname} = yadro</msg>
<status status="PASS" starttime="20240418 16:23:29.006" endtime="20240418 16:23:29.007"/>
</kw>
<kw name="Join Path" library="OperatingSystem">
<var>${metrics_path}</var>
<arg>${RESULTS_DIRECTORY}</arg>
<arg>profiler-${metrics_fname}</arg>
<doc>Joins the given path part(s) to the given base path.</doc>
<msg timestamp="20240418 16:23:29.007" level="TRACE">Arguments: [ '/workspaces/gcc-renode-verilator/renode/output/tests/' | 'profiler-yadro' ]</msg>
<msg timestamp="20240418 16:23:29.007" level="TRACE">Return: '/workspaces/gcc-renode-verilator/renode/output/tests/profiler-yadro'</msg>
<msg timestamp="20240418 16:23:29.007" level="INFO">${metrics_path} = /workspaces/gcc-renode-verilator/renode/output/tests/profiler-yadro</msg>
<status status="PASS" starttime="20240418 16:23:29.007" endtime="20240418 16:23:29.007"/>
</kw>
<if>
<branch type="IF" condition="${CREATE_EXECUTION_METRICS}">
<kw name="Execute Command" library="Remote">
<arg>EnableProfilerGlobally "${metrics_path}"</arg>
<status status="NOT RUN" starttime="20240418 16:23:29.008" endtime="20240418 16:23:29.008"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:23:29.007" endtime="20240418 16:23:29.008"/>
</branch>
<status status="PASS" starttime="20240418 16:23:29.007" endtime="20240418 16:23:29.008"/>
</if>
<kw name="Reset Emulation" library="Remote">
<msg timestamp="20240418 16:23:29.008" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20240418 16:23:29.017" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:23:29.008" endtime="20240418 16:23:29.017"/>
</kw>
<msg timestamp="20240418 16:23:29.018" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:23:28.643" endtime="20240418 16:23:29.018"/>
</kw>
<test id="s1-t1" name="Should Run" line="16">
<kw name="Reset Emulation" library="Remote" type="SETUP">
<msg timestamp="20240418 16:23:29.019" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20240418 16:23:29.021" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:23:29.018" endtime="20240418 16:23:29.021"/>
</kw>
<kw name="Execute Command" library="Remote">
<arg>mach create "yadro"</arg>
<msg timestamp="20240418 16:23:29.022" level="TRACE">Arguments: [ 'mach create "yadro"' ]</msg>
<msg timestamp="20240418 16:23:29.063" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:23:29.022" endtime="20240418 16:23:29.063"/>
</kw>
<kw name="Execute Command" library="Remote">
<arg>machine LoadPlatformDescription @${PLATFORM_DESC}</arg>
<msg timestamp="20240418 16:23:29.064" level="TRACE">Arguments: [ 'machine LoadPlatformDescription @/workspaces/gcc-renode-verilator/yadro.repl' ]</msg>
<msg timestamp="20240418 16:23:30.192" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:23:29.064" endtime="20240418 16:23:30.192"/>
</kw>
<kw name="Execute Command" library="Remote">
<var>${stdout}</var>
<arg>${SYSBUS_MODULE} ConnectionParameters</arg>
<msg timestamp="20240418 16:23:30.193" level="TRACE">Arguments: [ 'sysbus.cosim ConnectionParameters' ]</msg>
<msg timestamp="20240418 16:23:30.351" level="TRACE">Return: '33273 37699 127.0.0.1\n\n'</msg>
<msg timestamp="20240418 16:23:30.351" level="INFO">${stdout} = 33273 37699 127.0.0.1

</msg>
<status status="PASS" starttime="20240418 16:23:30.192" endtime="20240418 16:23:30.351"/>
</kw>
<kw name="Split String" library="String">
<var>@{words}</var>
<arg>${stdout}</arg>
<arg>${SPACE}</arg>
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<msg timestamp="20240418 16:23:30.352" level="TRACE">Arguments: [ '33273 37699 127.0.0.1\n\n' | ' ' ]</msg>
<msg timestamp="20240418 16:23:30.352" level="TRACE">Return: ['33273', '37699', '127.0.0.1\n\n']</msg>
<msg timestamp="20240418 16:23:30.352" level="INFO">@{words} = [ 33273 | 37699 | 127.0.0.1

 ]</msg>
<status status="PASS" starttime="20240418 16:23:30.351" endtime="20240418 16:23:30.352"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${words}[0]</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20240418 16:23:30.352" level="TRACE">Arguments: [ '33273' ]</msg>
<msg timestamp="20240418 16:23:30.352" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:23:30.352" endtime="20240418 16:23:30.352"/>
</kw>
<kw name="Log To Console" library="BuiltIn">
<arg>${words}[1]</arg>
<doc>Logs the given message to the console.</doc>
<msg timestamp="20240418 16:23:30.352" level="TRACE">Arguments: [ '37699' ]</msg>
<msg timestamp="20240418 16:23:30.352" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:23:30.352" endtime="20240418 16:23:30.352"/>
</kw>
<kw name="Start Process" library="Process">
<var>${proc}</var>
<arg>${SIMULATION_SCRIPT}</arg>
<arg>${words}[0]</arg>
<arg>${words}[1]</arg>
<arg>shell=True</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20240418 16:23:30.355" level="TRACE">Arguments: [ '/workspaces/gcc-renode-verilator/apb_uart/build/verilated' | '33273' | '37699' | shell='True' ]</msg>
<msg timestamp="20240418 16:23:30.355" level="INFO">Starting process:
/workspaces/gcc-renode-verilator/apb_uart/build/verilated 33273 37699</msg>
<msg timestamp="20240418 16:23:30.355" level="DEBUG">Process configuration:
cwd:     /workspaces/gcc-renode-verilator
shell:   True
stdout:  PIPE
stderr:  PIPE
stdin:   PIPE
alias:   None
env:     None</msg>
<msg timestamp="20240418 16:23:30.358" level="TRACE">Return: &lt;Popen: returncode: None args: '/workspaces/gcc-renode-verilator/apb_uart/bu...&gt;</msg>
<msg timestamp="20240418 16:23:30.358" level="INFO">${proc} = &lt;Popen: returncode: None args: '/workspaces/gcc-renode-verilator/apb_uart/bu...&gt;</msg>
<status status="PASS" starttime="20240418 16:23:30.352" endtime="20240418 16:23:30.358"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>2s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20240418 16:23:30.359" level="TRACE">Arguments: [ '2s' ]</msg>
<msg timestamp="20240418 16:23:32.359" level="INFO">Slept 2 seconds</msg>
<msg timestamp="20240418 16:23:32.359" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:23:30.359" endtime="20240418 16:23:32.359"/>
</kw>
<kw name="Execute Command" library="Remote">
<arg>${SYSBUS_MODULE} Connect</arg>
<msg timestamp="20240418 16:23:32.360" level="TRACE">Arguments: [ 'sysbus.cosim Connect' ]</msg>
<msg timestamp="20240418 16:23:32.375" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:23:32.360" endtime="20240418 16:23:32.375"/>
</kw>
<kw name="Execute Command" library="Remote">
<arg>sysbus LoadELF @${ELF_FILE}</arg>
<msg timestamp="20240418 16:23:32.375" level="TRACE">Arguments: [ 'sysbus LoadELF @/workspaces/gcc-renode-verilator/build/apb_uart_example.elf' ]</msg>
<msg timestamp="20240418 16:23:32.621" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:23:32.375" endtime="20240418 16:23:32.621"/>
</kw>
<kw name="Start Emulation" library="Remote">
<msg timestamp="20240418 16:23:32.622" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20240418 16:23:32.733" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:23:32.621" endtime="20240418 16:23:32.733"/>
</kw>
<kw name="Wait For Process" library="Process">
<var>${result}</var>
<arg>${proc}</arg>
<arg>timeout=${DEFUALT_TIMEOUT}</arg>
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<msg timestamp="20240418 16:23:32.733" level="TRACE">Arguments: [ &lt;Popen: returncode: None args: '/workspaces/gcc-renode-verilator/apb_uart/bu...&gt; | timeout='45s' ]</msg>
<msg timestamp="20240418 16:23:32.733" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20240418 16:24:17.808" level="INFO">Process did not complete in 45 seconds.</msg>
<msg timestamp="20240418 16:24:17.809" level="INFO">Leaving process intact.</msg>
<msg timestamp="20240418 16:24:17.809" level="TRACE">Return: None</msg>
<msg timestamp="20240418 16:24:17.809" level="INFO">${result} = None</msg>
<status status="PASS" starttime="20240418 16:23:32.733" endtime="20240418 16:24:17.809"/>
</kw>
<kw name="Test Teardown" library="renode-keywords" type="TEARDOWN">
<msg timestamp="20240418 16:24:17.810" level="TRACE">Arguments: [  ]</msg>
<kw name="Stop Profiler" library="renode-keywords">
<msg timestamp="20240418 16:24:17.811" level="TRACE">Arguments: [  ]</msg>
<if>
<branch type="IF" condition="${PROFILER_PROCESS}">
<kw name="Terminate Process" library="Process">
<arg>${PROFILER_PROCESS}</arg>
<doc>Stops the process gracefully or forcefully.</doc>
<status status="NOT RUN" starttime="20240418 16:24:17.811" endtime="20240418 16:24:17.811"/>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<arg>${PROFILER_PROCESS}</arg>
<arg>None</arg>
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<status status="NOT RUN" starttime="20240418 16:24:17.811" endtime="20240418 16:24:17.811"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:24:17.811" endtime="20240418 16:24:17.811"/>
</branch>
<status status="PASS" starttime="20240418 16:24:17.811" endtime="20240418 16:24:17.811"/>
</if>
<msg timestamp="20240418 16:24:17.811" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:24:17.811" endtime="20240418 16:24:17.812"/>
</kw>
<if>
<branch type="IF" condition="${CREATE_SNAPSHOT_ON_FAIL}">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Create Snapshot Of Failed Test</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20240418 16:24:17.812" level="TRACE">Arguments: [ 'Create Snapshot Of Failed Test' ]</msg>
<msg timestamp="20240418 16:24:17.812" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:24:17.812" endtime="20240418 16:24:17.812"/>
</kw>
<status status="PASS" starttime="20240418 16:24:17.812" endtime="20240418 16:24:17.812"/>
</branch>
<status status="PASS" starttime="20240418 16:24:17.812" endtime="20240418 16:24:17.812"/>
</if>
<if>
<branch type="IF" condition="${SAVE_LOGS}">
<if>
<branch type="IF" condition="&quot;${SAVE_LOGS_WHEN}&quot; == &quot;Always&quot;">
<kw name="Save Test Log" library="renode-keywords">
<status status="NOT RUN" starttime="20240418 16:24:17.812" endtime="20240418 16:24:17.812"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:24:17.812" endtime="20240418 16:24:17.812"/>
</branch>
<branch type="ELSE IF" condition="&quot;${SAVE_LOGS_WHEN}&quot; == &quot;Fail&quot;">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Save Test Log</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20240418 16:24:17.813" level="TRACE">Arguments: [ 'Save Test Log' ]</msg>
<msg timestamp="20240418 16:24:17.813" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:24:17.813" endtime="20240418 16:24:17.813"/>
</kw>
<status status="PASS" starttime="20240418 16:24:17.812" endtime="20240418 16:24:17.813"/>
</branch>
<status status="PASS" starttime="20240418 16:24:17.812" endtime="20240418 16:24:17.813"/>
</if>
<status status="PASS" starttime="20240418 16:24:17.812" endtime="20240418 16:24:17.813"/>
</branch>
<status status="PASS" starttime="20240418 16:24:17.812" endtime="20240418 16:24:17.813"/>
</if>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<var>${res}</var>
<arg>Import Library</arg>
<arg>Dialogs</arg>
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<msg timestamp="20240418 16:24:17.814" level="TRACE">Arguments: [ 'Import Library' | 'Dialogs' ]</msg>
<kw name="Import Library" library="BuiltIn">
<arg>Dialogs</arg>
<doc>Imports a library with the given name and optional arguments.</doc>
<msg timestamp="20240418 16:24:17.814" level="TRACE">Arguments: [ 'Dialogs' ]</msg>
<msg timestamp="20240418 16:24:17.817" level="TRACE">Return: None</msg>
<msg timestamp="20240418 16:24:17.817" level="FAIL">Importing library 'robot.libraries.Dialogs' failed: ModuleNotFoundError: No module named 'tkinter'
Traceback (most recent call last):
  None
PYTHONPATH:
  /workspaces/gcc-renode-verilator/renode/tests
  /usr/lib/python310.zip
  /usr/lib/python3.10
  /usr/lib/python3.10/lib-dynload
  /usr/local/lib/python3.10/dist-packages
  /usr/lib/python3/dist-packages</msg>
<msg timestamp="20240418 16:24:17.817" level="DEBUG">ModuleNotFoundError: No module named 'Tkinter'

During handling of the above exception, another exception occurred:

ModuleNotFoundError: No module named 'tkinter'

During handling of the above exception, another exception occurred:

robot.errors.DataError: ModuleNotFoundError: No module named 'tkinter'
Traceback (most recent call last):
  None
PYTHONPATH:
  /workspaces/gcc-renode-verilator/renode/tests
  /usr/lib/python310.zip
  /usr/lib/python3.10
  /usr/lib/python3.10/lib-dynload
  /usr/local/lib/python3.10/dist-packages
  /usr/lib/python3/dist-packages

During handling of the above exception, another exception occurred:

robot.errors.DataError: Importing library 'robot.libraries.Dialogs' failed: ModuleNotFoundError: No module named 'tkinter'
Traceback (most recent call last):
  None
PYTHONPATH:
  /workspaces/gcc-renode-verilator/renode/tests
  /usr/lib/python310.zip
  /usr/lib/python3.10
  /usr/lib/python3.10/lib-dynload
  /usr/local/lib/python3.10/dist-packages
  /usr/lib/python3/dist-packages

During handling of the above exception, another exception occurred:

RuntimeError: Importing library 'robot.libraries.Dialogs' failed: ModuleNotFoundError: No module named 'tkinter'
Traceback (most recent call last):
  None
PYTHONPATH:
  /workspaces/gcc-renode-verilator/renode/tests
  /usr/lib/python310.zip
  /usr/lib/python3.10
  /usr/lib/python3.10/lib-dynload
  /usr/local/lib/python3.10/dist-packages
  /usr/lib/python3/dist-packages</msg>
<status status="FAIL" starttime="20240418 16:24:17.814" endtime="20240418 16:24:17.818"/>
</kw>
<msg timestamp="20240418 16:24:17.819" level="TRACE">Return: ('FAIL',
 "Importing library 'robot.libraries.Dialogs' failed: ModuleNotFoundError: No module named 'tkinter'\nTraceback (most recent call last):\n  None\nPYTHONPATH:\n  /workspaces/gcc-renode-verilator/renode/tests\n  /usr/lib/python310.zip\n  /usr/lib/python3.10\n  /usr/lib/python3.10/lib-dynload\n  /usr/local/lib/python3.10/dist-packages\n  /usr/lib/python3/dist-packages")</msg>
<msg timestamp="20240418 16:24:17.819" level="INFO">${res} = ('FAIL', "Importing library 'robot.libraries.Dialogs' failed: ModuleNotFoundError: No module named 'tkinter'\nTraceback (most recent call last):\n  None\nPYTHONPATH:\n  /workspaces/gcc-renode-verilato...</msg>
<status status="PASS" starttime="20240418 16:24:17.814" endtime="20240418 16:24:17.819"/>
</kw>
<if>
<branch type="IF" condition="${HOLD_ON_ERROR}">
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<arg>Run Keywords</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' == 'FAIL'</arg>
<arg>Log</arg>
<arg>Couldn't load the Dialogs library - interactive debugging is not possible</arg>
<arg>console=True</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' != 'FAIL'</arg>
<arg>Open GUI</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' != 'FAIL'</arg>
<arg>Pause Execution</arg>
<arg>Test failed. Press OK once done debugging.</arg>
<arg>AND</arg>
<arg>Run Keyword If</arg>
<arg>'${res[0]}' != 'FAIL'</arg>
<arg>Close GUI</arg>
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<msg timestamp="20240418 16:24:17.820" level="TRACE">Arguments: [ 'Run Keywords' | 'Run Keyword If' | "'${res[0]}' == 'FAIL'" | 'Log' | "Couldn't load the Dialogs library - interactive debugging is not possible" | 'console=True' | 'AND' | 'Run Keyword If' | "'${res[0]}' != 'FAIL'" | 'Open GUI' | 'AND' | 'Run Keyword If' | "'${res[0]}' != 'FAIL'" | 'Pause Execution' | 'Test failed. Press OK once done debugging.' | 'AND' | 'Run Keyword If' | "'${res[0]}' != 'FAIL'" | 'Close GUI' ]</msg>
<msg timestamp="20240418 16:24:17.820" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:24:17.820" endtime="20240418 16:24:17.820"/>
</kw>
<status status="PASS" starttime="20240418 16:24:17.819" endtime="20240418 16:24:17.820"/>
</branch>
<status status="PASS" starttime="20240418 16:24:17.819" endtime="20240418 16:24:17.821"/>
</if>
<kw name="Reset Emulation" library="Remote">
<msg timestamp="20240418 16:24:17.821" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20240418 16:24:17.846" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:24:17.821" endtime="20240418 16:24:17.846"/>
</kw>
<kw name="Clear Cached Log" library="Remote">
<msg timestamp="20240418 16:24:17.846" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20240418 16:24:17.853" level="TRACE">Return: ''</msg>
<status status="PASS" starttime="20240418 16:24:17.846" endtime="20240418 16:24:17.853"/>
</kw>
<msg timestamp="20240418 16:24:17.853" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:24:17.810" endtime="20240418 16:24:17.854"/>
</kw>
<status status="PASS" starttime="20240418 16:23:29.018" endtime="20240418 16:24:17.854"/>
</test>
<kw name="Teardown" library="renode-keywords" type="TEARDOWN">
<msg timestamp="20240418 16:24:17.855" level="TRACE">Arguments: [  ]</msg>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER}">
<kw name="Stop Remote Server" library="Remote">
<status status="NOT RUN" starttime="20240418 16:24:17.855" endtime="20240418 16:24:17.855"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:24:17.855" endtime="20240418 16:24:17.855"/>
</branch>
<status status="PASS" starttime="20240418 16:24:17.855" endtime="20240418 16:24:17.855"/>
</if>
<if>
<branch type="IF" condition="not ${SKIP_RUNNING_SERVER}">
<kw name="Wait For Process" library="Process">
<doc>Waits for the process to complete or to reach the given timeout.</doc>
<status status="NOT RUN" starttime="20240418 16:24:17.856" endtime="20240418 16:24:17.856"/>
</kw>
<status status="NOT RUN" starttime="20240418 16:24:17.856" endtime="20240418 16:24:17.856"/>
</branch>
<status status="PASS" starttime="20240418 16:24:17.855" endtime="20240418 16:24:17.856"/>
</if>
<msg timestamp="20240418 16:24:17.856" level="TRACE">Return: None</msg>
<status status="PASS" starttime="20240418 16:24:17.854" endtime="20240418 16:24:17.856"/>
</kw>
<meta name="HotSpot_Action">-</meta>
<status status="PASS" starttime="20240418 16:23:28.584" endtime="20240418 16:24:17.856"/>
</suite>
<statistics>
<total>
<stat pass="1" fail="0" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="1" fail="0" skip="0" id="s1" name="Test Suite">Test Suite</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
