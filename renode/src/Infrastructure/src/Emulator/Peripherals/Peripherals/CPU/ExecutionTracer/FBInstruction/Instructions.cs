// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FBInstruction
{
    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct Instructions : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
        public static Instructions GetRootAsInstructions(ByteBuffer _bb) { return GetRootAsInstructions(_bb, new Instructions()); }
        public static Instructions GetRootAsInstructions(ByteBuffer _bb, Instructions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Instructions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public FBInstruction.Instruction? Instructions_(int j) { int o = __p.__offset(4); return o != 0 ? (FBInstruction.Instruction?)(new FBInstruction.Instruction()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int Instructions_Length { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

        public static Offset<FBInstruction.Instructions> CreateInstructions(FlatBufferBuilder builder,
            VectorOffset instructionsOffset = default(VectorOffset))
        {
            builder.StartTable(1);
            Instructions.AddInstructions(builder, instructionsOffset);
            return Instructions.EndInstructions(builder);
        }

        public static void StartInstructions(FlatBufferBuilder builder) { builder.StartTable(1); }
        public static void AddInstructions(FlatBufferBuilder builder, VectorOffset instructionsOffset) { builder.AddOffset(0, instructionsOffset.Value, 0); }
        public static VectorOffset CreateInstructionsVector(FlatBufferBuilder builder, Offset<FBInstruction.Instruction>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateInstructionsVectorBlock(FlatBufferBuilder builder, Offset<FBInstruction.Instruction>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateInstructionsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<FBInstruction.Instruction>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateInstructionsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<FBInstruction.Instruction>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartInstructionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<FBInstruction.Instructions> EndInstructions(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBInstruction.Instructions>(o);
        }
        public static void FinishInstructionsBuffer(FlatBufferBuilder builder, Offset<FBInstruction.Instructions> offset) { builder.Finish(offset.Value); }
        public static void FinishSizePrefixedInstructionsBuffer(FlatBufferBuilder builder, Offset<FBInstruction.Instructions> offset) { builder.FinishSizePrefixed(offset.Value); }
    }
}
