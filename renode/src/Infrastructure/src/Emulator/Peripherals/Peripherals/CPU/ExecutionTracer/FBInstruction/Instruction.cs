// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace FBInstruction
{
    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct Instruction : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_4(); }
        public static Instruction GetRootAsInstruction(ByteBuffer _bb) { return GetRootAsInstruction(_bb, new Instruction()); }
        public static Instruction GetRootAsInstruction(ByteBuffer _bb, Instruction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Instruction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public ulong Addr { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public uint Opcode { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
        public string Mnemonic { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMnemonicBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
        public ArraySegment<byte>? GetMnemonicBytes() { return __p.__vector_as_arraysegment(8); }
#endif
        public byte[] GetMnemonicArray() { return __p.__vector_as_array<byte>(8); }
        public string Operands(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
        public int OperandsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
        public string Inputs(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
        public int InputsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
        public string Outputs(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
        public int OutputsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
        public bool IsNop { get { int o = __p.__offset(16); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public bool IsBranch { get { int o = __p.__offset(18); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public ulong BranchTarget { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
        public bool IsFlush { get { int o = __p.__offset(22); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public bool IsVctrl { get { int o = __p.__offset(24); return o != 0 ? 0 != __p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public ulong Loads(int j) { int o = __p.__offset(26); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
        public int LoadsLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetLoadsBytes() { return __p.__vector_as_span<ulong>(26, 8); }
#else
        public ArraySegment<byte>? GetLoadsBytes() { return __p.__vector_as_arraysegment(26); }
#endif
        public ulong[] GetLoadsArray() { return __p.__vector_as_array<ulong>(26); }
        public ulong Stores(int j) { int o = __p.__offset(28); return o != 0 ? __p.bb.GetUlong(__p.__vector(o) + j * 8) : (ulong)0; }
        public int StoresLength { get { int o = __p.__offset(28); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<ulong> GetStoresBytes() { return __p.__vector_as_span<ulong>(28, 8); }
#else
        public ArraySegment<byte>? GetStoresBytes() { return __p.__vector_as_arraysegment(28); }
#endif
        public ulong[] GetStoresArray() { return __p.__vector_as_array<ulong>(28); }
        public float Lmul { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
        public byte Sew { get { int o = __p.__offset(32); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
        public short Vl { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

        public static Offset<FBInstruction.Instruction> CreateInstruction(FlatBufferBuilder builder,
            ulong addr = 0,
            uint opcode = 0,
            StringOffset mnemonicOffset = default(StringOffset),
            VectorOffset operandsOffset = default(VectorOffset),
            VectorOffset inputsOffset = default(VectorOffset),
            VectorOffset outputsOffset = default(VectorOffset),
            bool is_nop = false,
            bool is_branch = false,
            ulong branch_target = 0,
            bool is_flush = false,
            bool is_vctrl = false,
            VectorOffset loadsOffset = default(VectorOffset),
            VectorOffset storesOffset = default(VectorOffset),
            float lmul = 0.0f,
            byte sew = 0,
            short vl = 0)
        {
            builder.StartTable(16);
            Instruction.AddBranchTarget(builder, branch_target);
            Instruction.AddAddr(builder, addr);
            Instruction.AddLmul(builder, lmul);
            Instruction.AddStores(builder, storesOffset);
            Instruction.AddLoads(builder, loadsOffset);
            Instruction.AddOutputs(builder, outputsOffset);
            Instruction.AddInputs(builder, inputsOffset);
            Instruction.AddOperands(builder, operandsOffset);
            Instruction.AddMnemonic(builder, mnemonicOffset);
            Instruction.AddOpcode(builder, opcode);
            Instruction.AddVl(builder, vl);
            Instruction.AddSew(builder, sew);
            Instruction.AddIsVctrl(builder, is_vctrl);
            Instruction.AddIsFlush(builder, is_flush);
            Instruction.AddIsBranch(builder, is_branch);
            Instruction.AddIsNop(builder, is_nop);
            return Instruction.EndInstruction(builder);
        }

        public static void StartInstruction(FlatBufferBuilder builder) { builder.StartTable(16); }
        public static void AddAddr(FlatBufferBuilder builder, ulong addr) { builder.AddUlong(0, addr, 0); }
        public static void AddOpcode(FlatBufferBuilder builder, uint opcode) { builder.AddUint(1, opcode, 0); }
        public static void AddMnemonic(FlatBufferBuilder builder, StringOffset mnemonicOffset) { builder.AddOffset(2, mnemonicOffset.Value, 0); }
        public static void AddOperands(FlatBufferBuilder builder, VectorOffset operandsOffset) { builder.AddOffset(3, operandsOffset.Value, 0); }
        public static VectorOffset CreateOperandsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateOperandsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateOperandsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateOperandsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartOperandsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddInputs(FlatBufferBuilder builder, VectorOffset inputsOffset) { builder.AddOffset(4, inputsOffset.Value, 0); }
        public static VectorOffset CreateInputsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateInputsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateInputsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateInputsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartInputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddOutputs(FlatBufferBuilder builder, VectorOffset outputsOffset) { builder.AddOffset(5, outputsOffset.Value, 0); }
        public static VectorOffset CreateOutputsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateOutputsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateOutputsVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateOutputsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartOutputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddIsNop(FlatBufferBuilder builder, bool isNop) { builder.AddBool(6, isNop, false); }
        public static void AddIsBranch(FlatBufferBuilder builder, bool isBranch) { builder.AddBool(7, isBranch, false); }
        public static void AddBranchTarget(FlatBufferBuilder builder, ulong branchTarget) { builder.AddUlong(8, branchTarget, 0); }
        public static void AddIsFlush(FlatBufferBuilder builder, bool isFlush) { builder.AddBool(9, isFlush, false); }
        public static void AddIsVctrl(FlatBufferBuilder builder, bool isVctrl) { builder.AddBool(10, isVctrl, false); }
        public static void AddLoads(FlatBufferBuilder builder, VectorOffset loadsOffset) { builder.AddOffset(11, loadsOffset.Value, 0); }
        public static VectorOffset CreateLoadsVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateLoadsVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateLoadsVectorBlock(FlatBufferBuilder builder, ArraySegment<ulong> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateLoadsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<ulong>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartLoadsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
        public static void AddStores(FlatBufferBuilder builder, VectorOffset storesOffset) { builder.AddOffset(12, storesOffset.Value, 0); }
        public static VectorOffset CreateStoresVector(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddUlong(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateStoresVectorBlock(FlatBufferBuilder builder, ulong[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateStoresVectorBlock(FlatBufferBuilder builder, ArraySegment<ulong> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateStoresVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<ulong>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartStoresVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
        public static void AddLmul(FlatBufferBuilder builder, float lmul) { builder.AddFloat(13, lmul, 0.0f); }
        public static void AddSew(FlatBufferBuilder builder, byte sew) { builder.AddByte(14, sew, 0); }
        public static void AddVl(FlatBufferBuilder builder, short vl) { builder.AddShort(15, vl, 0); }
        public static Offset<FBInstruction.Instruction> EndInstruction(FlatBufferBuilder builder)
        {
            int o = builder.EndTable();
            return new Offset<FBInstruction.Instruction>(o);
        }
    }
}
